name: Deploy to GitHub Pages

on:
  push:
    branches: [main]
    paths:
      - '**.md'
      - 'assets/**'
      - '.github/workflows/*.yml'
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          npm ci
          
          # Install Japanese fonts
          sudo apt-get update
          sudo apt-get install -y fonts-noto-cjk fonts-noto-emoji
          
      - name: Setup Pages
        uses: actions/configure-pages@v4
        
      - name: Build presentations
        run: |
          # Create output directory
          mkdir -p _site/{slides,pdf,assets}
          
          # Copy static assets
          if [ -d assets ]; then
            cp -r assets/* _site/assets/
          fi
          
          # Build main presentation
          if [ -f slides.md ]; then
            npx marp slides.md --html --allow-local-files -o _site/slides/index.html
            npx marp slides.md --pdf --allow-local-files -o _site/pdf/slides.pdf
          fi
          
          # Build all other presentations
          for md in $(find . -name "*.md" -not -path "./node_modules/*" -not -path "./_site/*" -not -path "./.github/*" -not -name "README*.md" -not -name "slides.md"); do
            filename=$(basename "$md" .md)
            dir=$(dirname "$md")
            
            # Create nested directory structure in output
            mkdir -p "_site/slides/${dir#./}"
            mkdir -p "_site/pdf/${dir#./}"
            
            echo "Building $md..."
            npx marp "$md" --html --allow-local-files -o "_site/slides/${dir#./}/${filename}.html"
            npx marp "$md" --pdf --allow-local-files -o "_site/pdf/${dir#./}/${filename}.pdf"
          done
          
      - name: Generate navigation page
        run: |
          cat > _site/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="ja">
          <head>
              <meta charset="utf-8">
              <meta name="viewport" content="width=device-width, initial-scale=1">
              <title>Presentation Gallery</title>
              <style>
                  :root {
                      --primary: #3498db;
                      --secondary: #2c3e50;
                      --background: #f5f7fa;
                      --card-bg: #ffffff;
                      --text: #333333;
                      --border: #e0e6ed;
                  }
                  
                  * {
                      margin: 0;
                      padding: 0;
                      box-sizing: border-box;
                  }
                  
                  body {
                      font-family: 'Noto Sans CJK JP', 'Noto Sans', sans-serif;
                      background: var(--background);
                      color: var(--text);
                      line-height: 1.6;
                  }
                  
                  .container {
                      max-width: 1200px;
                      margin: 0 auto;
                      padding: 20px;
                  }
                  
                  header {
                      background: var(--secondary);
                      color: white;
                      padding: 2rem 0;
                      margin-bottom: 2rem;
                      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                  }
                  
                  header h1 {
                      text-align: center;
                      font-size: 2.5rem;
                      font-weight: 300;
                  }
                  
                  .presentations {
                      display: grid;
                      grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
                      gap: 2rem;
                      margin-bottom: 3rem;
                  }
                  
                  .presentation-card {
                      background: var(--card-bg);
                      border-radius: 8px;
                      padding: 1.5rem;
                      box-shadow: 0 2px 8px rgba(0,0,0,0.1);
                      transition: transform 0.3s, box-shadow 0.3s;
                  }
                  
                  .presentation-card:hover {
                      transform: translateY(-4px);
                      box-shadow: 0 4px 16px rgba(0,0,0,0.15);
                  }
                  
                  .presentation-card h3 {
                      color: var(--secondary);
                      margin-bottom: 1rem;
                      font-size: 1.5rem;
                  }
                  
                  .presentation-links {
                      display: flex;
                      gap: 1rem;
                      margin-top: 1rem;
                  }
                  
                  .btn {
                      flex: 1;
                      padding: 0.75rem 1.5rem;
                      text-align: center;
                      text-decoration: none;
                      border-radius: 4px;
                      font-weight: 500;
                      transition: background-color 0.3s, transform 0.2s;
                  }
                  
                  .btn:active {
                      transform: scale(0.98);
                  }
                  
                  .btn-primary {
                      background: var(--primary);
                      color: white;
                  }
                  
                  .btn-primary:hover {
                      background: #2980b9;
                  }
                  
                  .btn-secondary {
                      background: #ecf0f1;
                      color: var(--secondary);
                  }
                  
                  .btn-secondary:hover {
                      background: #bdc3c7;
                  }
                  
                  .metadata {
                      font-size: 0.9rem;
                      color: #7f8c8d;
                      margin-top: 0.5rem;
                  }
                  
                  footer {
                      text-align: center;
                      padding: 2rem 0;
                      color: #7f8c8d;
                      border-top: 1px solid var(--border);
                  }
                  
                  @media (max-width: 768px) {
                      .presentations {
                          grid-template-columns: 1fr;
                      }
                      
                      header h1 {
                          font-size: 2rem;
                      }
                  }
              </style>
          </head>
          <body>
              <header>
                  <div class="container">
                      <h1>ðŸ“Š Presentation Gallery</h1>
                  </div>
              </header>
              
              <div class="container">
                  <div class="presentations" id="presentations">
                      <!-- Presentations will be inserted here -->
                  </div>
              </div>
              
              <footer>
                  <div class="container">
                      <p>Generated with AutoSlideIdea | Powered by Marp</p>
                  </div>
              </footer>
              
              <script>
                  const presentations = [];
          EOF
          
          # Add main presentation if exists
          if [ -f _site/slides/index.html ]; then
            echo "presentations.push({ title: 'Main Presentation', html: 'slides/index.html', pdf: 'pdf/slides.pdf', date: '$(date -r slides.md +%Y-%m-%d)' });" >> _site/index.html
          fi
          
          # Add other presentations
          for html in $(find _site/slides -name "*.html" -not -name "index.html" | sort); do
            relative_path=${html#_site/slides/}
            pdf_path="pdf/${relative_path%.html}.pdf"
            title=$(basename "$html" .html | sed 's/-/ /g' | sed 's/\b\(.\)/\u\1/g')
            
            # Try to get the date from the source file
            source_md=$(find . -name "$(basename "$html" .html).md" -not -path "./_site/*" | head -1)
            if [ -n "$source_md" ] && [ -f "$source_md" ]; then
              date=$(date -r "$source_md" +%Y-%m-%d)
            else
              date=$(date +%Y-%m-%d)
            fi
            
            echo "presentations.push({ title: '$title', html: 'slides/$relative_path', pdf: '$pdf_path', date: '$date' });" >> _site/index.html
          done
          
          cat >> _site/index.html << 'EOF'
                  
                  const container = document.getElementById('presentations');
                  
                  presentations.forEach(pres => {
                      const card = document.createElement('div');
                      card.className = 'presentation-card';
                      card.innerHTML = `
                          <h3>${pres.title}</h3>
                          <div class="metadata">Updated: ${pres.date}</div>
                          <div class="presentation-links">
                              <a href="${pres.html}" class="btn btn-primary">View Slides</a>
                              <a href="${pres.pdf}" class="btn btn-secondary">Download PDF</a>
                          </div>
                      `;
                      container.appendChild(card);
                  });
              </script>
          </body>
          </html>
          EOF
          
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./_site
          
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4